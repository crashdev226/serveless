#!/usr/bin/env node

'use strict';

var JawsError = require('../lib/jaws-error'),
    JAWS = require('../lib/index.js'),
    program = require('commander'),
    handleExit = require('../lib/utils').handleExit;

program
    .version(JAWS._meta.version);

//TODO: need to provide cli options vars to bypass input

program
    .command('new')
    .description('Creates a new JAWS project in the current working directory and creates an AWS CloudFormation ' +
    'stack which provisions essential AWS resources for your JAWS project.')
    .option('-n, --proj-name <name>', 'Project name')
    .option('-s, --stage <stage>', 'Stage to create')
    .option('-r, --lambda-region <region>', 'Region lambda(s) will be created in. Only support 1 currently')
    .option('-e, --notification-email <email>', 'Email to be notified with stack alerts')
    .option('-p, --profile <profile name>', 'AWS profile to use (as defined in ~/.aws/credentials)')
    .action(function(options) {
      handleExit(JAWS.new(
          options.projName,  //name is reserved in commander...
          options.stage,
          options.lambdaRegion,
          options.notificationEmail,
          options.profile
      ));
    });

program
    .command('install <url>')
    .description('Installs a jaws-module from the specified url into the apprpriate area of your JAWS project.')
    .option('-s, --save', 'Save jaws-module\'s CloudFormation and Swagger Template to your project\'s')
    .action(function(url, options) {
      handleExit(JAWS.install(url, options.save));
    });

program
    .command('deploy <type> <stage>')
    .description('Deploy a lambda function, a REST API, or provision AWS resources for the specified stage.')
    .option('-a, --all-tagged', 'Deploy all lambdas tagged as deployable in their jaws.json')
    .option('-e, --all-at-once', 'By default, lambdas are deployed once at a time. This deploys all concurrently')
    .action(function(type, stage) {
      type = type.toLowerCase();
      switch (type) {
        case 'api':
          handleExit(JAWS.deployApi(stage));
          break;
        case 'lambda':
          var allTagged = (options.allTagged) ? true : false,
              allAtOnce = (options.allAtOnce) ? true : false;

          handleExit(JAWS.deployLambdas(stage, allTagged, allAtOnce));
          break;
        case 'resources':

          //TODO: implement
          break;
        default:
          console.error('Unsupported type ' + type + '. Must be api|lambda|resources');
          process.exit(1);
          break;
      }
    });

//TODO: add untag feature
//TODO: add tag/untag all feature
program
    .command('tag')
    .description('Tag a lambda function to be deployed the next time you run the deploy command for all' +
    ' tagged lambdas.')
    .action(function() {
      handleExit(JAWS.tag());
    });

program
    .command('logs <stage>')
    .description('Get logs for the lambda function in the specified stage in your current working directory.')
    .action(function(stage) {
      handleExit(JAWS.logs(stage));
    });

program
    .command('*')
    .description('Handles custom commands.')
    .action(function() {
      handleExit(JAWS.custom(arguments));
    });

if (process.argv.length == 2) {
  program.outputHelp();
} else {
  program.parse(process.argv);
}
